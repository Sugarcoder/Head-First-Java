CH 14 SAVING OBJECTS, SERIALIZATION, I/O; NOTES

- Objects have state and behavior. 

- Behavior lives in the class, but state lives within each individual object. 

- If your data will be used by only the Java program that generated it: use serialization (flattens and re-inflates objects - Ex. saving characters in a game).

- If your data will be used by other programs: write a plain text file (separate the states with commas).


Example: Writing a serialized object to a file

1. Make a FileOutputStream        // Object is written as bytes (connection stream)

FileOutputStream fileStream = new FileOutputStream("MyGame.ser");


2. Make an ObjectOutputStream     // Object is flattened (chain stream)

ObjectOutputStream os = new ObjectOutputStream(fileStream);


3. Write the object

os.writeObject(characterOne);
os.writeObject(characterTwo);
os.writeObject(characterThree);


4. Close the ObjectOutputStream

os.close();



- Connection streams represent a connection to a source or destination(file, socket, etc) while chain streams can't connect on their own and must be chained to a connection stream. 


- Objects on the heap have state - the value of the object's instance variables. These values make one instance of a class different from antoher instance of the same class.

- Serialized objects save the value of the instance variables, so that an identical instance (object) can be brought back to life on the heap.


Example: 

Foo myFoo = new Foo();
myFoo.setWidth(37);
myFoo.setHeight(70);

FileOutputStream fs = new FileOutputStream("foo.ser");
ObjectOutputStream os = new ObjectOutputStream(fs);
os.writeObject(myFoo);



-------Class State---------

- If you want your class to be serializable, implement Serializable.

- If any superclass of a class is serializable, the subclass is automaticaly serializable even if the subclass doesn't explicitly declare 'implements serializable'.


Example: 

objectOutputStream.writeObject(myBox);    // Whatever goes in 'myBox' must implement serializable or it will fail at runtime.



--------Transient (shouldn't be saved)--------

- Make an instance variable as 'transient' if it can't (or shouldn't) be saved.

Example: 

import java.net.*;

class Chat implements Serializable {
	transient String current ID;        // doesn't save the variable; it gets skipped.

	String userName; 

	// more code
}



---------Deserialization----------

Deserialization = restoring an object back to its original state.

1. Make a FileInputStream        // Object is read as bytes (connection stream)

FileInputStream fileStream = new FileInputStream("MyGame.ser");


2. Make an ObjectInputStream           // class is found and loaded, saved instance variables reassigned (chain stream)

ObjectInputStream os = new ObjectInputStream(fileStream);


3. Read the objects

Object one = os.readObject();
Object two = os.readObject();
Object three = os.readObject(); 


4. Cast the objects

GameCharacter elf = (GameCharacter) one;
GameCharacter troll = (GameCharacter) two;
GameCharacter magician = (GameCharacter) three;


4. Close the ObjectInputStream

os.close();



--------Writing a String to a Text File---------

To write a serialized object: 
objectOutputStream.writeObject(someObject);

To write a String:
fileWriter.write("My first String to save");


Example: 

import java.io.*;

class WriteAFile {
	public static void main (String[] args) {
		try {
			FileWriter writer = new FileWriter("Foo.txt");
			writer.write("Hello, foo!");
			writer.close();
		} catch (IOException ex) {
			ex.printStackTrace();
		}
	}
}



---------Java.io.File-----------

- The java.io.File class = represents a file on disk, but doesn't actually represent the contents of the file. 


Some things you can do with a File object: 

1. Make a File object represent an existing file

File f = new File("MyCode.txt");


2. Make a new directory

File dir = new File("Chapter7");
dir.mkdir();


3. List the contents of a directory

if (dir.isDirectory) {
	String[] dirContents = dir.list();

	for (int i = 0; i < dirContents.length; i++) {
		System.out.println(dirContents[i]);
	}
}

 
 4. Get the absolute path of a file or directory

 System.out.println(dir.getAbsolutePath());


 5. Delete a file or directory (returns true if successful)

 boolean isDeleted = f.delete();



 ----------Buffers----------

 - Buffers give you a temporary holding place to group things until the holder is full. 

 BufferedWriter writer = new BufferdWriter(new FileWriter(aFile()));


 - If you want to send data before the buffer is full, just 'flush it'. 

 writer.flush();



 --------Split()---------

- Split() = seperates the string into pieces

Example: 

String toTest = "What is blue + yellow?/green";

String() result = toTest.split("/");

for (String token:result) {
	System.out.println(token);
}



-------Serialized Objects Evolving--------

- When you think your class might evolve after someone has serialized objects from it...

1. Use the serialver command-line tool to get the version ID for your class

2. Paste the output into your class

Ex: static final long serialVersionUID = 12345L;

3. Be sure that when you make changes to the class, you take responsibility for the consequences. Make sure that your new class can deal with an old class deserialized with default values.




- An array object is serializable, as long as the things in the array are serializable. 






