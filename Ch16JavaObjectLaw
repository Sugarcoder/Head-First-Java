------Java Object Law for HashCode() and equals()-----

- The API docs for classObject state the rules you must follow: 

1. If two objects are equal, they must have matching hashcodes. 

2. If two objects are equal, calling equals on either object must return true. (ex. if (a.equals(b), then (b.equals(a) )

3. If you override equals(), you must override hashCode().



- a.equals(b) must also mean a.hashCode() == b.hashCode()

- a.hashCode() == b.hashCode() does not have to mean a.equals(b)




----------TreeSets and Sorting-----------

- TreeSet is similar to HashSet (it prevents duplicates).

- It works just like the sort() method (TreeSet uses each object's compareTo() method for the sort).

- Downside is that even if you don't need sorting, TreeSet takes a performance hit. 


Example: 

TreeSet<Song> songSet = new TreeSet<Song>();     

// Instantiate a TreeSet instead of a HashSet. Calling the no-arg TreeSet constructor means the set will use the Song object's compareTo() method for the sort.


songSet.addAll(songList);

// We can add all the songs from the HashSet using addAll() (or we can add the songs individually using SongSet.add() just like using ArrayList).



- TreeSet elements MUST be comparable.



---------To Use TreeSet---------

To use a TreeSet, one of these things must be true: 

1. The elements in the list must be of a type that implements Comparable. 

Example: 

class Book implements Comparable {
	String title;
	public Book (String t) {
		title = t;
	}

	public int compareTo(object b) {
		Book book = (Book) b:
		return (title.compareTo(book.title));
	}
}



2. You use the TreeSet's overloaded constructor that takes a Comparator. 

- TreeSet works like a sort() method. 

- You can use a custom Comparator that knows how to sort the elements in the set. 

Example: 

public class BookCompare implements Comparator<Book>{
	public int compare(Book one, Book two) {
		return (one.title.compareTo(two.title));
	}
}

class Test {
	public void go() {
	Book b1 = new Book("How Cats Work");
	Book b2 = new Book("Remix Your Body");
	Book b3("Finding Nemo");

	BookCompare bCompare = new BookCompare();
	TreeSet<Book> tree = new TreeSet<Book>(bCompare);

	tree.add(new Book("How Cats Work"));
	tree.add(new Book("Remix Your Body"));
	tree.add(new Book("Finding Nemo"));

	System.out.println(tree);
	}
}




----------MAPS----------

- Each element in a Map is actually TWO objects - a key and a value. You can have duplicate values, but not duplicate keys. 

Example: Keys - "Ball1", "Ball2", "Ball3"


- HashMap needs TWO type parameters, one for the key and one for the value.

Example: 

import java.util.*;

public class TestMap {
	public static void main(String[] args) {

		HashMap<String, Integer> scores = new HashMap<String, Integer>();

		scores.put("Kathy", 25);       // Use put() instead of add(), and it takes two arguments (key, value).
		scores.put("Bill", 300);
		scores.put("Seth", 100);

		System.out.println(scores);
		System.out.println(scores.get("Bill"));     // The get() method takes a key, and returns the value (in this case an integer).
	}
}




-----------Generic Lists------------

- If a method argument is an array of Animals, it will also take an array of any Animal subtype. 

Example: 
- If a method is declared as...

void foo(Animal[] a) {}

- You can call both of these...

foo(anAnimalArray);
foo(aDogArray);


--------Reminder of how a regular array is like-------

import java.util.*;

public class TestGenerics1 {
	public static void main(String[] args) {
		new TestGenerics1().go();
	}

	public void go() {
		Animals[] animals = {new Dog(), new Cat(), new Dog()};
		Dog[] dogs = {new Dog(), new Dog(), new Dog()};
		takeAnimals(animals);
		takeAnimals(dogs); 
	}

	public void takeAnimals(Animals[] animals) {
		for(Animal a: animals) {
			a.eat();
		}
	}
}


abstract class Animal {
	void eat() {
		System.out.println("animals eating");
	}
}

class Dog extends Animal {
	void bark() {
	}
}

class Cat extends Animal {
	void meow() {
	}
}




---------Using Polymorphic Arguments and Generics--------

- If you declare a method to take ArrayList<Animal>, it can only take an ArrayList<Animal>...not ArrayList<Dog> or ArrayList<Cat>.

- Array types are checked again at runtime, but collection type checks happen only when you compile. 

- There is a way to create a method argument that can accept an ArrayList of any Animal subtype. The simplest way is to use a 'wildcard'(?).

- If you want to take an ArrayList of types that implement the Pet interface, you'd declare it as: ArrayList<? extends Pet>

Example: 

public void takeAnimals(ArrayList<? extends Animal> animals) {
	for(Animal a: animals) {
		a.eat();
	}
}



- You can still invoke methods on the elements in the list, but you cannot add elements to the list. 
(You can do things with the list elements, but you cannot put new things in the list)

This is OK: 

for(Animals[] animals) {
	a.eat();
}


This is NOT OK: 

animals.add(new Cat());



----------Alternative Syntax For Doing The Same Thing----------

- A different way of declaring the type parameter, but the results are the same...

This: 

public <T extends Animal> void takeThing(ArrayList<T> list)


Is the same as this: 

public void takeThing(ArrayList<? extends Animal> list)


