CH 15 NETWORKING & THREADS: NOTES

- The Client has to know about the Server.
- The Server has to know about ALL the Clients. 

How it works: 

1. Client A connects to the server.
Ex: Make a socket connection to 196.164.1.103 at port 5000


2. The server makes a connection and adds the client to the list of participants.
Ex: write.println(aMessage)


3. Client B connects. 
Ex: String s = reader.readLine()


4. Client A sends a message to the chat service.

5. The server distributes the message to ALL participants (including the original sender).




--------Socket Connection---------

- To make a Socket connection, you need to know two things about the server: who it is and which port it is running on (IP address and TCP port number). 


- To connect to another machine, we need a Socket connection. 

- Socket = an object that represents a network connection between two machines.

- Connection = A relationship between two machines, where two pieces of software know about each other and how to communicate with each other. 


Socket chatSocket = new Socket("196.164.1.1-3", 5000);


- A TCP port is just a number. A 16-bit number that identifies a specific program on the server.


Well-known TCP port numbers for common server applications: 
- HTTP: 80
- HTTPS: 443
- FTP: 20
- POP3: 110
- Time: 37
- Telnet: 23
- SMTP: 25


- TCP port numbers from 0 to 1023 are reservered for well-known services. Only use between 1024 to 65535.



--------To Read Data From A Socket, use BufferedReader---------

1. Make a Socket connection to the server. 

Socket chatSocket = new Socket("127.0.0.1", 5000);


2. Make an InputStreamReader chained to the Socket's low-level (connection) input stream.

InputStreamReader stream = new InputStreamReader(chatSocket.getInputStream());


3. Make a BufferedReader and read!

BufferedReader reader = new BufferedReader(stream);
String message = reader.readLine();



---------To Write Data To A Socket, use PrintWriter---------

1. Make a Socket connection to the server.

Socket chatSocket = new SOcket("127.0.0.1", 5000);


2. Make a PrintWriter chained to the Socket's low-level (connection) output stream. 

PrintWriter writer = new PrintWriter(chatSocket.getOutputStream());


3. Write (print) something

writer.println("message to send");    // adds a new line at the end of what it sends

writer.print("another message");      // doesn't add a new line



---------Server Socket----------

- Only a couple of Sockets is needed to write a server application. 


1. Server application makes a ServerSocket, on a specific port. 

ServerSocket serverSock = new ServerSocket(4242);


2. Client makes a Socket connection to the server application. 

Socket sock = new Socket("190.165.1.103", 4242);


3. Server makes a new Socket to communicate with this client.

Socket sock = serverSock.accept();



----------Multithreading-----------

- Thread = A separate thread of execution, with a separate call stack. 

- Java has multiple threading built right into the fabric of the language. 

- By creating a new Thread object, you've launched a seperate thread of execution, with its very own call stack. 

- Each time you want to start up a new thread of execution, you create an instance of class Thread.


How to make a new thread of execution: 

Thread t = new Thread();
t.start();


- Multiple threading = have to look at both the thread and the job that is run by the thread, and look at the 'Thread' class in the java.lang package.


- Java has multiple threads, but only one Thread class.


- With more than one call stack, you get the appearance of having multiple things happen at the same time. 



- thread (lower-case 't') = separate call stack

- Thread (upper-case 'T') = a class that represents a thread of execution.



Example of how a thread is run: 

1. The JVM calls the main() method. 

public static void main(String[] args) {
	.....
}


2. main() starts a new thread. The main thread is temporarily frozen while the new thread starts running.

Runnable r = new MyThreadJob();
Thread t = new Thread(r);
t.start();
Dog d = new Dog();


3. The JVM switches between the new thread (user thread A) and the original main thread, until both threads complete. 



--------How to Launch A New Thread---------

1. Make a Runnable object (the thread's job)

Runnable threadJob = new MyRunnable();


2. Make a Thread object (the worker) and give it a Runnable (the job)

Thread myThread = new Thread(threadJob);


3. Start the thread 

myThread.start();



- A Runnable is the job a thread is supposed to run. 

- A Runnable holds the method that goes on the bottom of the new thread's stack: run().


- To make a job for your thread, implement the Runnable interface.

public class MyRunnable implements Runnable {
	
	public void run() {
		doMore();
	}

	public void doMore() {
		System.out.println("top of the stack");
	}
}


class ThreadTester {
	
	public static void main (String[] args) {

		Runnable threadJob = new MyRunnable();
		Thread myThread = new Thread(threadJob);

		myThread.start();

		System.out.println("back in main");
	}
}



- sleep() = putting the thread on hold and stop 'running'. 

Ex: 

// put it under 'public void go()'

try {
	Thread.sleep(2000);
} catch (InterruptedException ex) {
	ex.printStackTrace();
}



-------Downside to Threads--------

- Threads can lead to concurrency issues.

- Deadly scenario: two or more threads have access to a single object's data. 



---------'Syncrhonized' keyword-----------

- synchronized = a thread needs a key in order to access the synchronized code. 

- synchronized keyword = to modify a method so that only one thread at a time can access it.

Example: 

private syncrhonized void makeWithdrawal() {
	.....
}



- A thread can enter a synchronized method only if the thread can get the key to the object's lock. 


- Only synchronize the bare minimum that should be synchronized, because it can slow the program down and restrict concurrency.

- The deadly side of synchronization is thread deadlock (when you have two threads, both threads hold a key the other thread wants).

