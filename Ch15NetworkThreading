CH 15 NETWORKING & THREADS: NOTES

- The Client has to know about the Server.
- The Server has to know about ALL the Clients. 

How it works: 

1. Client A connects to the server.
Ex: Make a socket connection to 196.164.1.103 at port 5000


2. The server makes a connection and adds the client to the list of participants.
Ex: write.println(aMessage)


3. Client B connects. 
Ex: String s = reader.readLine()


4. Client A sends a message to the chat service.

5. The server distributes the message to ALL participants (including the original sender).




--------Socket Connection---------

- To make a Socket connection, you need to know two things about the server: who it is and which port it is running on (IP address and TCP port number). 


- To connect to another machine, we need a Socket connection. 

- Socket = an object that represents a network connection between two machines.

- Connection = A relationship between two machines, where two pieces of software know about each other and how to communicate with each other. 


Socket chatSocket = new Socket("196.164.1.1-3", 5000);


- A TCP port is just a number. A 16-bit number that identifies a specific program on the server.


Well-known TCP port numbers for common server applications: 
- HTTP: 80
- HTTPS: 443
- FTP: 20
- POP3: 110
- Time: 37
- Telnet: 23
- SMTP: 25


- TCP port numbers from 0 to 1023 are reservered for well-known services. Only use between 1024 to 65535.



--------To Read Data From A Socket, use BufferedReader---------

1. Make a Socket connection to the server. 

Socket chatSocket = new Socket("127.0.0.1", 5000);


2. Make an InputStreamReader chained to the Socket's low-level (connection) input stream.

InputStreamReader stream = new InputStreamReader(chatSocket.getInputStream());


3. Make a BufferedReader and read!

BufferedReader reader = new BufferedReader(stream);
String message = reader.readLine();



---------To Write Data To A Socket, use PrintWriter---------

1. Make a Socket connection to the server.

Socket chatSocket = new SOcket("127.0.0.1", 5000);


2. Make a PrintWriter chained to the Socket's low-level (connection) output stream. 

PrintWriter writer = new PrintWriter(chatSocket.getOutputStream());


3. Write (print) something

writer.println("message to send");    // adds a new line at the end of what it sends

writer.print("another message");      // doesn't add a new line



---------Server Socket----------

- Only a couple of Sockets is needed to write a server application. 


1. Server application makes a ServerSocket, on a specific port. 

ServerSocket serverSock = new ServerSocket(4242);


2. Client makes a Socket connection to the server application. 

Socket sock = new Socket("190.165.1.103", 4242);


3. Server makes a new Socket to communicate with this client.

Socket sock = serverSock.accept();




