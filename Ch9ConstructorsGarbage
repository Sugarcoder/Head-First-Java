CH 9 CONSTRUCTORS & GARBAGE COLLECTION: NOTES

- Heap = Where all objects live (Ex. Duck, Snowboard, Button)

- Stack = Where method invocations and local variables live (Ex. go(), doStuff(), main() )

- Instance variables = declared inside a class, but not inside a method. 

Example:

public class Duck {
	int size;     // instance variable
}


- Local variables = declared inside a method, including method parameters. They live only as long as the method is on the stack (before the closing curly brace).

Example: 

public void foo(int x) {
	int i = x + 3;          // parameter 'x', i and b are all local variables
	boolean b = true;
}


- The method at the top of the stack is always the currently-running method for that stack. 


- Instance variables live on the Heap, inside the objects they belong to.



---------3 Steps of Object Declaration & Assignment--------

1. Declare a reference variable (Duck myDuck = ...)

2. Create an object (... = new Duck(); )

3. Assign the object to the reference ( = )



---------Constructors----------

- A constructor looks and feel a lot like a method, but its not a method. It is the code that runs when you instantiate an object (ex. 'new...')

- Every class you create already has a constructor.

- They key feature of a constructor is that it runs before the object can be assigned to a reference. 

Example: 

public class Duck {
	public Duck() {
		System.out.println("Quack!");   // constructor code
	}
}


- Most people use constructors to initialize the state of an object (to make and assign values to the object's instance variables).

- Constructors cannot have a return type. 

- If a method or constructor has a parameter, you must pass an appropriate argument when you invoke that method or constructor. 

TWO ways to make a new Duck: 

public class Duck2 {
	int size; 

	public Duck2() {
		// write a default size
		size = 27; 
	}

	public Duck2(int duckSize) {
		// use duckSize parameter
		size = duckSize;
	}
}

-------

#1. To make a Duck when you know the size: 

Duck2 d = new Duck2(15);


#2. To make a Duck when you do not know the size: 

Duck2 dc2 = new Duck2();


- The two options to make a Duck needs two constructors: one that takes an int and one that doesn't. 


- If you have more than one constructor in a class, it means you have overloaded constructors. 

- If you write a constructor that takes arguments, and you still want a no-arg constructor, you'll have to build the no-arg constructor yourself.  



- Overloaded constructors = more than one constructor in a class

- If you ahve more than one constructor in a class, the constructors MUST have different argument lists.

Here are 4 different constructors to make a new mushroom:

public class Mushroom {
	public Mushroom(int size) { }     // when you know the size, but don't know if it's magic

	public Mushroom() { }      // when you don't know anything

	public Mushroom(boolean isMagic) { }      // when you know if its magic, but don't know the size

	public Mushroom(boolean isMagic, int size) { }
	
	public Mushroom(int size, boolean isMagic) { }      // when you know the size and magic
} 



---------4 Things to Remember About Constructors---------

#1. A constructor is the code that runs when sombody says 'new' on a class type.
 

#2. A constructor must have the same name as the class, and no return type.


#3. If you don't put a constructor in your class, the compiler puts in a default constructor. The default constructor is always a no-arg constructor. 

Example: public Duck() { }


#4. You can have more than one constructor in your class, as long as the argument lists are different. 

Example: 
public Duck() { }
public Duck(int size) { }
public Duck(String name) { }
public Duck(String name, int size) { }



---------Object Construction----------

- Making a Hippo means making the Animal and Object parts too.

Example: 

public class Animal {
	public Animal() {
		System.out.println("Making a Animal");
	}
}

public class Hippo extends Animal {
	public Hippo() {
		System.out.println("Making a Hippo");
	}
}

public class TestHippo {
	public static void main(String[] args) {
	System.out.println("Starting...");
	Hippo h = new Hippo();
	}
}



--------Super Constructor---------

- The only way to call a super constructor is by caling 'super()'.

Example: 

public class Duck extends Animal {
	int size;

	public Duck(int newSize) {
		super(); 
		size = newSize;
	}
}


- A call to super() puts the superclass constructor on the top of the Stack. 

- The call to super() must be the first statement in each constructor. 

Example: 

public Boop() {
	super();
}


Superclass constructor example: 

public abstract class Animal {
	private String name;  

	public String getName() {        // A getter method that Hippo inherits
		return name; 
	}

	public Animal(String theName) {
		name = theName;      // The constructor that takes the name and assigns it the name instance variable
	}
}


public class Hippo extends Animal {
	public Hippo(String name) {      // Hippo constructor takes a name
		super(name);       // It sends the name up the Stack to the Animal constructor
	}
}


public class MakeHippo {
	public static void main(String[] args) {
		Hippo h = new Hippo("Buffy");        // Make a Hippo, passing the name "Buffy" to the Hippo constructor.
		System.out.println(h.getName());       // Then, call the Hippo's inherited 'getName'
	}
}



- Use 'this()' to call a constructor from another overloaded constructor in the same class. 

- The call to this() can only be used in a constructor, and must be the first statement in a constructor. 

- A constructor can have a call to super() or this() (not both).

- 'this' is a reference to the current object. 

Example: 

class Mini extends Car {
	Color color; 

	public Mini() {
		this(Color.Red);      // The no-arg constructor supplies a default Color and call sthe overloaded constructor (the one that calls 'super()')
	}
	
	public Mini(Color c) {
		super("Mini");       // This is the constructor that does the real work of initializing the object (including the call to super() )
		color = c;
		// more initialization
	}
}



--------Object Lifespan---------

- A local variable lives only within the method that declared the variable. 

- An instance variable lives as long as the object does. 

- A local variable is in 'scope' only within the method in which the variable was declared. A local variable is 'alive' as long as its Stack frame is on the Stack (until the method completes).



--------3 Ways To Get Rid of an Object's Reference------

1. The reference goes out of scope, permanently 

Example: 

void go() {
		Life z = new Life();       // 'z' dies at the end of the method 
}


2. The reference is assigned another object

Example:

Life z = new Life();
z = new Life();


3. The reference is explicitly set to null
 
Example: 

Life z = new Life(); 
z = null;



